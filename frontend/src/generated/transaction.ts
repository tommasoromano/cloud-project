// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.1
// source: transaction.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export interface Transaction {
  id: string;
  sender: string;
  recipient: string;
  timestamp: number;
  amount: number;
  transactionStatus: Transaction_TransactionStatus;
  note: string;
  statusMessage: string;
}

export enum Transaction_TransactionStatus {
  pending = 0,
  success = 1,
  failed = 2,
  cancelled = 3,
  requested = 4,
  UNRECOGNIZED = -1,
}

export function transaction_TransactionStatusFromJSON(object: any): Transaction_TransactionStatus {
  switch (object) {
    case 0:
    case "pending":
      return Transaction_TransactionStatus.pending;
    case 1:
    case "success":
      return Transaction_TransactionStatus.success;
    case 2:
    case "failed":
      return Transaction_TransactionStatus.failed;
    case 3:
    case "cancelled":
      return Transaction_TransactionStatus.cancelled;
    case 4:
    case "requested":
      return Transaction_TransactionStatus.requested;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Transaction_TransactionStatus.UNRECOGNIZED;
  }
}

export function transaction_TransactionStatusToJSON(object: Transaction_TransactionStatus): string {
  switch (object) {
    case Transaction_TransactionStatus.pending:
      return "pending";
    case Transaction_TransactionStatus.success:
      return "success";
    case Transaction_TransactionStatus.failed:
      return "failed";
    case Transaction_TransactionStatus.cancelled:
      return "cancelled";
    case Transaction_TransactionStatus.requested:
      return "requested";
    case Transaction_TransactionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseTransaction(): Transaction {
  return {
    id: "",
    sender: "",
    recipient: "",
    timestamp: 0,
    amount: 0,
    transactionStatus: 0,
    note: "",
    statusMessage: "",
  };
}

export const Transaction = {
  encode(message: Transaction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    if (message.recipient !== "") {
      writer.uint32(26).string(message.recipient);
    }
    if (message.timestamp !== 0) {
      writer.uint32(33).double(message.timestamp);
    }
    if (message.amount !== 0) {
      writer.uint32(41).double(message.amount);
    }
    if (message.transactionStatus !== 0) {
      writer.uint32(48).int32(message.transactionStatus);
    }
    if (message.note !== "") {
      writer.uint32(58).string(message.note);
    }
    if (message.statusMessage !== "") {
      writer.uint32(66).string(message.statusMessage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Transaction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.recipient = reader.string();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.timestamp = reader.double();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.amount = reader.double();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.transactionStatus = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.note = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transaction {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      transactionStatus: isSet(object.transactionStatus)
        ? transaction_TransactionStatusFromJSON(object.transactionStatus)
        : 0,
      note: isSet(object.note) ? globalThis.String(object.note) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
    };
  },

  toJSON(message: Transaction): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = message.timestamp;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.transactionStatus !== 0) {
      obj.transactionStatus = transaction_TransactionStatusToJSON(message.transactionStatus);
    }
    if (message.note !== "") {
      obj.note = message.note;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Transaction>, I>>(base?: I): Transaction {
    return Transaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Transaction>, I>>(object: I): Transaction {
    const message = createBaseTransaction();
    message.id = object.id ?? "";
    message.sender = object.sender ?? "";
    message.recipient = object.recipient ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.amount = object.amount ?? 0;
    message.transactionStatus = object.transactionStatus ?? 0;
    message.note = object.note ?? "";
    message.statusMessage = object.statusMessage ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
